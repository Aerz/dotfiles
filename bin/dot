#!/usr/bin/env bash

##? Usage:
##?   dot
##?   dot <context>
##?   dot <context> <command>
##?
##? Options:
##?   -h --help  Print this help command

export DOTFILES_PATH="$HOME/.dotfiles"
export DOTFILES_BIN_PATH="$HOME/.local/bin"

source "$DOTFILES_PATH/scripts/_core/init.sh"
source "$DOTFILES_BIN_PATH/docopts/docopts.sh"

list_command_paths() {
  find "$DOTFILES_PATH/scripts" -maxdepth 2 -type f |
  grep -v "\.sh" |
  grep -v core |
  sort
}

fzf_prompt() {
  local paths="$1"

  context_command="$(
    echo "$paths" |
    xargs -I % sh -c 'echo "$(basename $(dirname %)) $(basename %)"' |
    fzf --height 100% --layout=reverse --preview-window=:wrap --preview \
      'dot $(echo {}) -h | bat --style=snip --color=always'
  )"
  # exit when no command selected
  [ -z "$context_command" ] && exit 0

  printf "$context_command "
  read command_args
  if collection::is_empty "$context_command"; then
    dot $context_command
  else
    dot $context_command $command_args
  fi
}

if args::has_no_args "$@"; then
  fzf_prompt "$(list_command_paths)"
elif args::total_is 1 "$@"; then
  fzf_prompt "$(list_command_paths | grep "/$1/")"
else
  readonly context="$1"
  readonly command="$2"
  readonly command_path="$DOTFILES_PATH/scripts/$context/$command"
  shift 2

  docs::eval "$@"
  source "$command_path" "$@"
fi
